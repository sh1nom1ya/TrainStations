@model List<longDistanceTrains.Models.ViewModels.TicketUserVM>

<link rel="stylesheet" href="~/css/ticketsBrowse.css" asp-append-version="true"/>

<div class="hero">
    <li class="closeLi">
        <a asp-action="Index">
            <img src="~/images/close.png" class="close" alt="">
        </a>
    </li>
    <div class="routeSelect">
        <div class="inputTT">
            <input type="text" id="cityFrom" class="routeIn" name="cityFrom" placeholder="Введите номер телефона">
            <button class="routeBut">Найти</button>
        </div>
    </div>
    @foreach (var ticket in Model)
    {
        <div class="tickets">
            <div class="lines">
                <div class="string">
                    <div class="userInfo hlString">
                        <p>@ticket.Username</p>
                        <p>@ticket.Phone</p>
                        <p>@ticket.Ticket.price <span>р.</span></p>
                    </div>
                    <div class="ticketInfo hlString">
                        <p>Взрослые: </p>
                        <p>@ticket.Ticket.wagonType</p>
                        <p>@ticket.Ticket.adults <span>шт.</span></p>
                        <p>Дети: </p>
                        <p>@ticket.Ticket.wagonType</p>
                        <p>@ticket.Ticket.children <span>шт.</span></p>
                    </div>
                </div>
                <hr class="hrT">
                <form asp-action="DeleteTicket" method="post" class="knop">
                    <input type="hidden" name="routeId" value="@ticket.Ticket.ticketID"/>
                    <button class="delBut">Удалить</button>
                </form>
            </div>
        </div>
    }
    
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const phoneInput = document.getElementById("cityFrom");
        
        function showError(input, message) {
            let error = input.nextElementSibling;
            if (!error || !error.classList.contains("error-message")) {
                error = document.createElement("div");
                error.classList.add("error-message");
                input.parentNode.appendChild(error);
            }
            error.textContent = message;
        }
        
        function hideError(input) {
            const error = input.nextElementSibling;
            if (error && error.classList.contains("error-message")) {
                error.remove();
            }
        }
        
        function formatPhoneNumber(value) {

            const cleaned = value.replace(/[^0-9]/g, "");

            const maxDigits = 11;
            const trimmed = cleaned.slice(0, maxDigits);

            let formatted = "+7";
            if (trimmed.length > 1) {
                formatted += ` (${trimmed.slice(1, 4)}`;
            }
            if (trimmed.length > 4) {
                formatted += `) ${trimmed.slice(4, 7)}`;
            }
            if (trimmed.length > 7) {
                formatted += `-${trimmed.slice(7, 9)}`;
            }
            if (trimmed.length > 9) {
                formatted += `-${trimmed.slice(9, 11)}`;
            }

            return formatted;
        }
        
        phoneInput.addEventListener("input", function () {
            // Убираем все, кроме цифр
            let cleaned = this.value.replace(/[^0-9]/g, "");

            // Добавляем +7 в начало, если его нет
            if (!cleaned.startsWith("7")) {
                cleaned = "7" + cleaned.replace("7", ""); // Убедимся, что начинается с 7
            }

            // Ограничиваем длину номера (11 цифр, включая +7)
            const maxDigits = 11;
            cleaned = cleaned.slice(0, maxDigits);

            // Форматируем номер телефона
            this.value = formatPhoneNumber(cleaned);

            hideError(this); // Убираем ошибку при исправлении
        });

        // Проверка при потере фокуса
        phoneInput.addEventListener("blur", function () {
            // Проверяем, что номер телефона соответствует формату
            if (!/^\+7 \(\d{3}\) \d{3}-\d{2}-\d{2}$/.test(this.value)) {
                showError(this, "Введите номер телефона в формате: +7 (999) 123-45-67.");
            } else {
                hideError(this);
            }
        });

        // Ограничение ввода только цифр
        phoneInput.addEventListener("keydown", function (e) {
            // Разрешаем: цифры, Backspace, Delete, стрелки
            if (!/\d/.test(e.key) && e.key !== "Backspace" && e.key !== "Delete" && !e.key.startsWith("Arrow")) {
                e.preventDefault();
            }
        });

        phoneInput.value = "+7";
    });
</script>